using System.Collections;
using System.Collections.Generic;
using PresentFutures.XRAI.Florence;
using UnityEngine;
using Utilities.Extensions;

public class GameManager : MonoBehaviour
{
    [Header("Dependencies")]
    [SerializeField] private Florence2Controller florence2Controller;
    [SerializeField] private TTSManager ttsManager;
    [SerializeField] private LLMManager llmManager;
    [SerializeField] private ImageGen imageGenerator;
    [SerializeField] private STTManager sttManager;
    [SerializeField] private DepthEstimationManager depthEstimationManager;
    
    [Header("UI")]
    [SerializeField] private GameObject loadingPrefab;

    private readonly List<string> _detectedObjectNames = new();
    private List<TagManager> _totalTagManagers = new();
    private readonly List<TagManager> _selectedTagManagers = new();
    private TagManager _currentSelectedTagManager = null;
    
    // Turn tracking: true = user's turn to pick object, false = AI's turn to pick object
    private bool _isUserTurnToPick = true;
    
    private void Start()
    {
        ToggleLoading(false);
        llmManager.onInferenceRunning.AddListener(() =>
        {
            ToggleLoading(true);
        });
        imageGenerator.onGenerationCompleted.AddListener(OnImageGeneratedCompleted);
        
        llmManager.onInferenceCompleted.AddListener(llmResponse =>
        {
            ToggleLoading(false);
            
            // Can be story generated by AI or a comment based on User's story
            var story = llmResponse.GetStory();
            var comment = llmResponse.GetComment();
            var aiNextVoice = !string.IsNullOrEmpty(story) ? story : comment;
            var isAiStoryGeneration = !string.IsNullOrEmpty(story);
            var imageGenPrompt = llmResponse.GetImagePrompt();
            
            Debug.Log($"[GameManager] aiNextVoice: '{aiNextVoice}' (Story: '{llmResponse.GetStory()}', Comment: '{llmResponse.GetComment()}')");
            
            Debug.Log($"[GameManager] About to call imageGenerator.GenerateImage with prompt: '{imageGenPrompt}'");
            Debug.Log($"[GameManager] imageGenerator is null: {imageGenerator == null}");
            
            if (!string.IsNullOrEmpty(imageGenPrompt))
            {
                imageGenerator.GenerateImage(imageGenPrompt);
                Debug.Log($"[GameManager] Called imageGenerator.GenerateImage successfully");
            }
            else
            {
                Debug.LogError($"[GameManager] Image prompt is null or empty! Cannot generate image.");
            }
            ttsManager.Speak(aiNextVoice, () =>
            {
                // Handle the next step based on whose turn it is to pick objects
                Debug.Log($"DEBUG: isAiStoryGeneration={isAiStoryGeneration}, NextQuestion='{llmResponse.GetNextQuestion()}', SelectedObjectByAi='{llmResponse.GetSelectedObjectByAi()}'");
                Debug.Log($"DEBUG: Story='{llmResponse.GetStory()}', Comment='{llmResponse.GetComment()}', ImagePrompt='{llmResponse.GetImagePrompt()}'");
                Debug.Log($"DEBUG: NextQuestion isEmpty: {string.IsNullOrEmpty(llmResponse.GetNextQuestion())}");
                
                if (isAiStoryGeneration && !string.IsNullOrEmpty(llmResponse.GetNextQuestion()))
                {
                    // AI just told a story, remove the used tag and pick object for user
                    _totalTagManagers.Remove(_currentSelectedTagManager);
                    var go = _currentSelectedTagManager.gameObject;
                    go.Destroy();
                    _currentSelectedTagManager = null;
                    
                    Debug.Log($"Next question {llmResponse.GetNextQuestion()}");
                    ttsManager.Speak(llmResponse.GetNextQuestion(), () =>
                    {
                        // Assign _currentSelectedTagManager from the LLM
                        var newSelectedTagManager = _totalTagManagers.Find(it => it.GetObjectName() == llmResponse.GetSelectedObjectByAi());
                        if (newSelectedTagManager != null)
                        {
                            _currentSelectedTagManager = newSelectedTagManager;
                            _selectedTagManagers.Add(newSelectedTagManager);
                            
                            // First show the AI-selected object, then hide all others
                            StartCoroutine(ShowAiSelectedObjectAndHideOthers());

                            // Now it's user's turn to create a story (AI picked the object)
                            // Keep _isUserTurnToPick = false until user finishes their story
                            Debug.Log("Starting user recording for story creation...");
                            
                            // Show the stop recording button on the selected object
                            _currentSelectedTagManager.ShowStopRecordingButton();
                            
                            sttManager.OnStartRecording();
                        }
                        else
                        {
                            Debug.LogError($"Could not find TagManager for object: {llmResponse.GetSelectedObjectByAi()}");
                        }
                    });
                }
                else if (!isAiStoryGeneration && !string.IsNullOrEmpty(llmResponse.GetNextQuestion()))
                {
                    // AI just evaluated user's story, remove the used tag and prompt user to pick next
                    if (_currentSelectedTagManager != null)
                    {
                        _totalTagManagers.Remove(_currentSelectedTagManager);
                        var go = _currentSelectedTagManager.gameObject;
                        go.Destroy();
                        _currentSelectedTagManager = null;
                    }
                    
                    Debug.Log($"AI evaluation complete, prompting user to pick: {llmResponse.GetNextQuestion()}");
                    ttsManager.Speak(llmResponse.GetNextQuestion(), () =>
                    {
                        // Show all available objects for user to pick for AI
                        Debug.Log("Showing objects for user to pick for AI's turn");
                        _isUserTurnToPick = true; // User will now pick object for AI
                        StartCoroutine(ShowRemainingTags());
                    });
                }
                else
                {
                    // Fallback case - something went wrong with the AI response
                    Debug.LogError($"Unexpected AI response state: isAiStoryGeneration={isAiStoryGeneration}, NextQuestion='{llmResponse.GetNextQuestion()}'");
                    Debug.Log("Fallback: Showing all objects for user to pick");
                    _isUserTurnToPick = true;
                    StartCoroutine(ShowRemainingTags());
                }
            });
        });

        florence2Controller.onInferenceCompleted.AddListener(entities =>
        {
            foreach (var entityName in entities.Labels)
            {
                _detectedObjectNames.Add(entityName);
            }
        });
        sttManager.onTranscribed.AddListener(OnUserStoryTranscription);
        
        depthEstimationManager.OnDepthMapReceived.AddListener(OnDepthMapReceived);
    }

    private void OnDepthMapReceived(Texture2D originalTexture, Texture2D depthTexture)
    {
        _currentSelectedTagManager.ShowImage(originalTexture, depthTexture);
    }

    private void OnUserStoryTranscription(string userStory)
    {
        Debug.Log($"[GameManager] OnUserStoryTranscription called with: '{userStory}'");
        // Stop recording if it's still active
        sttManager.ForceStopRecording();
        
        // Hide the stop recording button since recording is complete
        if (_currentSelectedTagManager != null)
        {
            _currentSelectedTagManager.HideStopRecordingButton();
        }
        
        // Get available objects (excluding already used ones)
        var availableObjects = new List<string>();
        foreach (var tagManager in _totalTagManagers)
        {
            if (!_selectedTagManagers.Contains(tagManager))
            {
                availableObjects.Add(tagManager.GetObjectName());
            }
        }
        
        // Evaluate user's story and get AI's response
        llmManager.CallLLMForEvaluatingUser(userStory, availableObjects);
    }

    private void OnImageGeneratedCompleted(Texture2D image)
    {
        Debug.Log($"[GameManager] OnImageGeneratedCompleted called with image: {image != null}");
        Debug.Log($"[GameManager] _currentSelectedTagManager is null: {_currentSelectedTagManager == null}");
        Debug.Log("Image generated, about to find depth");
        depthEstimationManager.ProcessImage(image);
    }

    public void OnObjectSelected(TagManager selectedTagManager)
    {
        var objectName = selectedTagManager.GetObjectName();
        
        // Initialize tag managers list if first time
        if (_totalTagManagers.Count == 0)
        {
            _totalTagManagers = new List<TagManager>(FindObjectsByType<TagManager>(FindObjectsSortMode.None));
        }
        
        _currentSelectedTagManager = selectedTagManager;
        _selectedTagManagers.Add(selectedTagManager);
        
        if (_isUserTurnToPick)
        {
            // User picked object for AI to tell story about
            Debug.Log($"User picked {objectName} for AI to create story");
            ttsManager.Speak($"Perfect! You selected {objectName}. Let me see how creative I can be...", () =>
            {
                ToggleLoading(true);
                // User just picked object for AI to tell story about
                // After AI tells story, AI will pick object for user
                _isUserTurnToPick = false;
                
                // Get available objects (excluding already used ones)
                var availableObjectNames = new List<string>();
                foreach (var tagManager in _totalTagManagers)
                {
                    if (!_selectedTagManagers.Contains(tagManager))
                    {
                        availableObjectNames.Add(tagManager.GetObjectName());
                    }
                }
                
                llmManager.CallLLM(objectName, availableObjectNames);
            });
        }
        else
        {
            // This shouldn't happen - AI should pick objects when it's not user's turn
            Debug.LogWarning("User selected object but it's not user's turn to pick!");
            ttsManager.Speak($"Wait, it's not your turn to pick! But I'll take {objectName} anyway...", () =>
            {
                ToggleLoading(true);
                
                // Get available objects (excluding already used ones)
                var availableObjectNames = new List<string>();
                foreach (var tagManager in _totalTagManagers)
                {
                    if (!_selectedTagManagers.Contains(tagManager))
                    {
                        availableObjectNames.Add(tagManager.GetObjectName());
                    }
                }
                
                llmManager.CallLLM(objectName, availableObjectNames);
            });
        }

        StartCoroutine(HideRemainingTags());
    }

    public void ToggleLoading(bool shouldShow)
    {
        loadingPrefab.SetActive(shouldShow);
    }

    private IEnumerator ShowRemainingTags()
    {
        Debug.Log("Showing all available objects for user to pick...");
        foreach (var tagManager in _totalTagManagers)
        {
            // It means we already used it for the game
            if (_selectedTagManagers.Contains(tagManager)) continue;
            
            tagManager.gameObject.SetActive(true);
            Debug.Log($"Showing available object: {tagManager.GetObjectName()}");
            yield return new WaitForSeconds(0.1f);
        }
    }

    private IEnumerator HideRemainingTags()
    {
        Debug.Log($"Hiding all objects except: {_currentSelectedTagManager?.GetObjectName() ?? "none"}");
        foreach (var tag in _totalTagManagers)
        {
            if (tag == _currentSelectedTagManager) continue;
            
            tag.gameObject.SetActive(false);
            yield return new WaitForSeconds(0.1f);
        }
    }

    private IEnumerator ShowAiSelectedObjectAndHideOthers()
    {
        // First, ensure the AI-selected object is visible and highlighted
        if (_currentSelectedTagManager != null)
        {
            _currentSelectedTagManager.gameObject.SetActive(true);
            Debug.Log($"AI selected and highlighting: {_currentSelectedTagManager.GetObjectName()}");
            yield return new WaitForSeconds(0.2f); // Brief pause to show the selection
        }
        
        // Then hide all other objects
        yield return StartCoroutine(HideRemainingTags());
    }
}
